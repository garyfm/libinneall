#include <doctest.h>

#include <libinneall/math/matrix4.hpp>

TEST_CASE("matrix4: Testing scalar operations") {
    {
        inl::Matrix4 m { 1 };
        CHECK(m == inl::Matrix4 { { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 } });
    }

    {
        inl::Matrix4 m { { 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16 } };

        CHECK(m + 1 == inl::Matrix4 { { 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16, 5, 9, 13, 17 } });
        CHECK(m - 1 == inl::Matrix4 { { 0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15 } });
        CHECK(m * 2 == inl::Matrix4 { { 2, 10, 18, 26, 4, 12, 20, 28, 6, 14, 22, 30, 8, 16, 24, 32 } });
        CHECK(m / 2 == inl::Matrix4 { { 0.5, 2.5, 4.5, 6.5, 1, 3, 5, 7, 1.5, 3.5, 5.5, 7.5, 2, 4, 6, 8 } });
    }

    {
        inl::Matrix4 m { { 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16 } };
        m += 1;
        CHECK(m == inl::Matrix4 { { 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16, 5, 9, 13, 17 } });
    }
    {
        inl::Matrix4 m { { 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16 } };
        m -= 1;
        CHECK(m == inl::Matrix4 { { 0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15 } });
    }
    {
        inl::Matrix4 m { { 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16 } };
        m *= 2;
        CHECK(m == inl::Matrix4 { { 2, 10, 18, 26, 4, 12, 20, 28, 6, 14, 22, 30, 8, 16, 24, 32 } });
    }
    {
        inl::Matrix4 m { { 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16 } };
        m /= 2;
        CHECK(m == inl::Matrix4 { { 0.5, 2.5, 4.5, 6.5, 1, 3, 5, 7, 1.5, 3.5, 5.5, 7.5, 2, 4, 6, 8 } });
    }
}

TEST_CASE("matrix4: Testing matrix operations") {
    {
        inl::Matrix4 m1 { { 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16 } };
        inl::Matrix4 m2 { { 17, 21, 25, 29, 18, 22, 26, 30, 19, 23, 27, 31, 20, 24, 28, 32 } };

        CHECK(m1 + m2 == inl::Matrix4 { { 18, 26, 34, 42, 20, 28, 36, 44, 22, 30, 38, 46, 24, 32, 40, 48 } });
        CHECK(m1 - m2
            == inl::Matrix4 { { -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16 } });
    }

    {
        inl::Matrix4 m1 { { 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16 } };
        inl::Matrix4 m2 { { 17, 21, 25, 29, 18, 22, 26, 30, 19, 23, 27, 31, 20, 24, 28, 32 } };

        m1 += m2;
        CHECK(m1 == inl::Matrix4 { { 18, 26, 34, 42, 20, 28, 36, 44, 22, 30, 38, 46, 24, 32, 40, 48 } });
    }

    {
        inl::Matrix4 m1 { { 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16 } };
        inl::Matrix4 m2 { { 17, 21, 25, 29, 18, 22, 26, 30, 19, 23, 27, 31, 20, 24, 28, 32 } };

        m1 -= m2;
        CHECK(
            m1 == inl::Matrix4 { { -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16 } });
    }

    {
        inl::Matrix4 m1 { { 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16 } };
        inl::Matrix4 m2 { { 17, 21, 25, 29, 18, 22, 26, 30, 19, 23, 27, 31, 20, 24, 28, 32 } };

        m1 *= m2;
        CHECK(m1
            == inl::Matrix4 {
                { 250, 618, 986, 1354, 260, 644, 1028, 1412, 270, 670, 1070, 1470, 280, 696, 1112, 1528 } });
    }

    {
        inl::Matrix4 m1 { { 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16 } };
        inl::Matrix4 m2 { { 17, 21, 25, 29, 18, 22, 26, 30, 19, 23, 27, 31, 20, 24, 28, 32 } };

        m2 *= m1;
        CHECK(m2
            == inl::Matrix4 { { 538, 650, 762, 874, 612, 740, 868, 996, 686, 830, 974, 1118, 760, 920, 1080, 1240 } });
    }

    {
        inl::Matrix4 m1 { { 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16 } };
        inl::Matrix4 m2 { { 17, 21, 25, 29, 18, 22, 26, 30, 19, 23, 27, 31, 20, 24, 28, 32 } };

        inl::Matrix4 m3 = m1 * m2;
        CHECK(m3
            == inl::Matrix4 {
                { 250, 618, 986, 1354, 260, 644, 1028, 1412, 270, 670, 1070, 1470, 280, 696, 1112, 1528 } });
    }
}

TEST_CASE("matrix4: Testing cofactors") {
    {
        inl::Matrix4 m1 { { 2, 1, 0, 1, 0, 2, 1, 0, 1, 0, 1, 2, 3, 1, 0, 1 } };
        CHECK(inl::cofactor(m1, 0, 0) == doctest::Approx(4));
    }

    {
        inl::Matrix4 m1 { { 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16 } };
        CHECK(inl::cofactor(m1, 0, 0) == doctest::Approx(0.0f));
    }
}

TEST_CASE("matrix4: Testing determinant") {
    {
        inl::Matrix4 m1 { { 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16 } };
        CHECK(inl::determinant(m1) == doctest::Approx(0.0f));
    }

    {
        inl::Matrix4 m1 { { 2, 12, 9, 13, 10, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16 } };
        CHECK(inl::determinant(m1) == doctest::Approx(224));
    }
    {
        inl::Matrix4 m1 { { 1, 5, 10, 13, 7, 6, 10, 14, 10, 7, 11, 15, 10, 8, 12, 16 } };
        CHECK(inl::determinant(m1) == doctest::Approx(24));
    }
}

TEST_CASE("matrix4: Testing transpose") {
    {
        inl::Matrix4 m1 { { 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16 } };
        CHECK(inl::transpose(m1) == inl::Matrix4 { { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 } });
    }
}

#include <libinneall/base/log.hpp>

TEST_CASE("matrix4: Testing inverse") {
    {
        inl::Matrix4 m1 { { 1, 0, 1, 2, 2, 1, 0, 1, 3, 2, 1, 0, 4, 3, 2, 1 } };
        CHECK(inl::inverse(m1)
            == inl::Matrix4 { { 0.5, 0, 1.5, -1, -1, 0.5, -2, 1.5, 0.5, -1, 0.5, 0, 0, 0.5, -1, 0.5 } });
    }

    {
        inl::Matrix4 m1 { { 4, 0, 1, 2, 4, 1, 0, 1, 0, 2, 1, 0, 4, 3, 2, 1 } };

        inl::log::debug("{}", inl::inverse(m1));
        CHECK(inl::inverse(m1)
            == inl::Matrix4 { { -0.25, 0, -0.75, 0.5, 0, 0.5, 1, -0.5, 0, -1, -1, 1, 1, 0.5, 2, -1.5 } });
    }
}
